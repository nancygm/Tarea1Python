{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Investigación"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## numpy.matrix\n",
    "\n",
    "Es utilizado para retornar matrices. Tiene operadores especiales como la multiplicacion de matrices y las potencias de las matrices. \n",
    "\n",
    "En los ejemplos siguientes se pueden observar. La suma y resta de las matrices se realiza si son de la misma dimensión. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2]\n",
      " [3 2]\n",
      " [2 2]]\n",
      "[[3 4 3]\n",
      " [2 3 5]]\n",
      "[[3 4]\n",
      " [2 3]\n",
      " [2 5]]\n",
      "[[ 7 10 13]\n",
      " [13 18 19]\n",
      " [10 14 16]]\n",
      "[[-2 -2]\n",
      " [ 1 -1]\n",
      " [ 0 -3]]\n",
      "[[4 6]\n",
      " [5 5]\n",
      " [4 7]]\n",
      "[[4 5 4]\n",
      " [6 5 7]]\n"
     ]
    }
   ],
   "source": [
    "y = np.matrix([[1,2],[3,2],[2,2]])\n",
    "x = np.matrix([[3,4,3],[2,3,5]])\n",
    "z = np.matrix([[3,4],[2,3],[2,5]])\n",
    "print(y)\n",
    "print(x)\n",
    "print(z)\n",
    "print(y*x)\n",
    "print(y-z)\n",
    "print(y+z)\n",
    "print(np.transpose(y+z))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## numpy.ndarray\n",
    "\n",
    "Representa un array multidimensional y homogenea. Se le puede asignar un tipo de dato en la creacion del objeto. Se pueden crear ya sea con valores de 0´s, vacias o 1´s.\n",
    "\n",
    "Las operaciones que se realizan entre los arrays no son operaciones matriciales. Las operaciones como multiplicacion y potencia se realizan de casilla en casilla. Como se puede ver en el resultado que se encuentra acontinuación. La suma de matrices se realizan solo si el array tiene las mismas dimensiones.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[[1 2]\n",
      " [3 2]\n",
      " [2 2]]\n",
      "[[3 4]\n",
      " [2 3]\n",
      " [2 5]]\n",
      "[[ 3  8]\n",
      " [ 6  6]\n",
      " [ 4 10]]\n",
      "[[-2 -2]\n",
      " [ 1 -1]\n",
      " [ 0 -3]]\n",
      "[[4 6]\n",
      " [5 5]\n",
      " [4 7]]\n",
      "[[4 5 4]\n",
      " [6 5 7]]\n"
     ]
    }
   ],
   "source": [
    "c = np.array([[1,2],[3,2],[2,2]])\n",
    "v = np.array([[3,4],[2,3],[2,5]])\n",
    "print('')\n",
    "print(c)\n",
    "print(v)\n",
    "print(c*v)\n",
    "print(c-v)\n",
    "print(c+v)\n",
    "print(np.transpose(c+v))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
